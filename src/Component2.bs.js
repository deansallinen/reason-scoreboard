// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReasonReact = require("reason-react/src/ReasonReact.js");

var component = ReasonReact.reducerComponent("Example");

function str(prim) {
  return prim;
}

function setStorage(title, score) {
  localStorage.setItem(title, String(score));
  return /* () */0;
}

var lastId = /* record */[/* contents */0];

function newPlayer(name) {
  lastId[0] = lastId[0] + 1 | 0;
  return /* record */[
          /* id */lastId[0],
          /* score */0,
          /* name */name
        ];
}

var component$1 = ReasonReact.reducerComponent("PlayerInput");

function make(onSubmit, _children) {
  return /* record */[
          /* debugName */component$1[/* debugName */0],
          /* reactClassInternal */component$1[/* reactClassInternal */1],
          /* handedOffState */component$1[/* handedOffState */2],
          /* willReceiveProps */component$1[/* willReceiveProps */3],
          /* didMount */component$1[/* didMount */4],
          /* didUpdate */component$1[/* didUpdate */5],
          /* willUnmount */component$1[/* willUnmount */6],
          /* willUpdate */component$1[/* willUpdate */7],
          /* shouldUpdate */component$1[/* shouldUpdate */8],
          /* render */(function (self) {
              return React.createElement("input", {
                          placeholder: "Name of person",
                          type: "text",
                          value: self[/* state */1],
                          onKeyDown: (function (evt) {
                              if (evt.key === "Enter") {
                                Curry._1(onSubmit, self[/* state */1]);
                                return Curry._1(self[/* send */3], /* Clear */0);
                              } else {
                                return 0;
                              }
                            }),
                          onChange: (function ($$event) {
                              return Curry._1(self[/* send */3], /* Update */[$$event.target.value]);
                            })
                        });
            }),
          /* initialState */(function (param) {
              return "";
            }),
          /* retainedProps */component$1[/* retainedProps */11],
          /* reducer */(function (action, _state) {
              if (action) {
                return /* Update */Block.__(0, [action[0]]);
              } else {
                return /* Update */Block.__(0, [""]);
              }
            }),
          /* jsElementWrapped */component$1[/* jsElementWrapped */13]
        ];
}

var PlayerInput = /* module */[
  /* component */component$1,
  /* make */make
];

var component$2 = ReasonReact.reducerComponent("Player");

function make$1(id, name, score, _children) {
  return /* record */[
          /* debugName */component$2[/* debugName */0],
          /* reactClassInternal */component$2[/* reactClassInternal */1],
          /* handedOffState */component$2[/* handedOffState */2],
          /* willReceiveProps */component$2[/* willReceiveProps */3],
          /* didMount */component$2[/* didMount */4],
          /* didUpdate */component$2[/* didUpdate */5],
          /* willUnmount */component$2[/* willUnmount */6],
          /* willUpdate */component$2[/* willUpdate */7],
          /* shouldUpdate */component$2[/* shouldUpdate */8],
          /* render */(function (self) {
              return React.createElement("div", undefined, name, React.createElement("button", {
                              onClick: (function (_event) {
                                  return Curry._1(self[/* send */3], /* Increase */0);
                                })
                            }, String(self[/* state */1])));
            }),
          /* initialState */(function (param) {
              return 0;
            }),
          /* retainedProps */component$2[/* retainedProps */11],
          /* reducer */(function (action, state) {
              return /* Update */Block.__(0, [state + 1 | 0]);
            }),
          /* jsElementWrapped */component$2[/* jsElementWrapped */13]
        ];
}

var Player = /* module */[
  /* component */component$2,
  /* make */make$1
];

function make$2(greeting, _children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              return React.createElement("div", undefined, ReasonReact.element(undefined, undefined, make((function ($$event) {
                                    return Curry._1(self[/* send */3], /* AddPlayer */[$$event]);
                                  }), /* array */[])), React.createElement("div", undefined, $$Array.of_list(List.map((function (player) {
                                        return ReasonReact.element(String(player[/* id */0]), undefined, make$1(player[/* id */0], player[/* name */2], player[/* score */1], /* array */[]));
                                      }), self[/* state */1][/* players */0]))));
            }),
          /* initialState */(function (param) {
              return /* record */[/* players : [] */0];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              var name = action[0];
              setStorage(name, 0);
              return /* Update */Block.__(0, [/* record */[/* players : :: */[
                            newPlayer(name),
                            state[/* players */0]
                          ]]]);
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.component = component;
exports.str = str;
exports.setStorage = setStorage;
exports.lastId = lastId;
exports.newPlayer = newPlayer;
exports.PlayerInput = PlayerInput;
exports.Player = Player;
exports.make = make$2;
/* component Not a pure module */
