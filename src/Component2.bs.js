// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");

var component = ReasonReact.reducerComponent("Example");

function str(prim) {
  return prim;
}

function setStorage(title, score) {
  localStorage.setItem(title, String(score));
  return /* () */0;
}

function getStorage(name) {
  return Js_primitive.null_to_opt(localStorage.getItem(name));
}

function clearStorage(param) {
  localStorage.clear();
  return /* () */0;
}

function getKey(index) {
  return Js_primitive.null_to_opt(localStorage.key(index));
}

var lenStorage = localStorage.length;

var lastId = /* record */[/* contents */0];

function newPlayer(name) {
  lastId[0] = lastId[0] + 1 | 0;
  return /* record */[
          /* id */lastId[0],
          /* score */0,
          /* name */name
        ];
}

var component$1 = ReasonReact.reducerComponent("PlayerInput");

function make(onSubmit, _children) {
  return /* record */[
          /* debugName */component$1[/* debugName */0],
          /* reactClassInternal */component$1[/* reactClassInternal */1],
          /* handedOffState */component$1[/* handedOffState */2],
          /* willReceiveProps */component$1[/* willReceiveProps */3],
          /* didMount */component$1[/* didMount */4],
          /* didUpdate */component$1[/* didUpdate */5],
          /* willUnmount */component$1[/* willUnmount */6],
          /* willUpdate */component$1[/* willUpdate */7],
          /* shouldUpdate */component$1[/* shouldUpdate */8],
          /* render */(function (self) {
              return React.createElement("input", {
                          className: "input is-large is-rounded",
                          placeholder: "Add a player...",
                          type: "text",
                          value: self[/* state */1],
                          onKeyDown: (function (evt) {
                              if (evt.key === "Enter") {
                                Curry._1(onSubmit, self[/* state */1]);
                                return Curry._1(self[/* send */3], /* Clear */0);
                              } else {
                                return 0;
                              }
                            }),
                          onChange: (function ($$event) {
                              return Curry._1(self[/* send */3], /* Update */[$$event.target.value]);
                            })
                        });
            }),
          /* initialState */(function (param) {
              return "";
            }),
          /* retainedProps */component$1[/* retainedProps */11],
          /* reducer */(function (action, _state) {
              if (action) {
                return /* Update */Block.__(0, [action[0]]);
              } else {
                return /* Update */Block.__(0, [""]);
              }
            }),
          /* jsElementWrapped */component$1[/* jsElementWrapped */13]
        ];
}

var PlayerInput = /* module */[
  /* component */component$1,
  /* make */make
];

var component$2 = ReasonReact.reducerComponent("ScoreInput");

function make$1(onSubmit, _children) {
  return /* record */[
          /* debugName */component$2[/* debugName */0],
          /* reactClassInternal */component$2[/* reactClassInternal */1],
          /* handedOffState */component$2[/* handedOffState */2],
          /* willReceiveProps */component$2[/* willReceiveProps */3],
          /* didMount */component$2[/* didMount */4],
          /* didUpdate */component$2[/* didUpdate */5],
          /* willUnmount */component$2[/* willUnmount */6],
          /* willUpdate */component$2[/* willUpdate */7],
          /* shouldUpdate */component$2[/* shouldUpdate */8],
          /* render */(function (self) {
              return React.createElement("input", {
                          className: "input is-large is-rounded",
                          type: "number",
                          value: String(self[/* state */1]),
                          onKeyDown: (function (evt) {
                              if (evt.key === "Enter") {
                                Curry._1(onSubmit, self[/* state */1]);
                                return Curry._1(self[/* send */3], /* Clear */0);
                              } else {
                                return 0;
                              }
                            }),
                          onChange: (function ($$event) {
                              return Curry._1(self[/* send */3], /* Update */[Caml_format.caml_int_of_string($$event.target.value)]);
                            })
                        });
            }),
          /* initialState */(function (param) {
              return 0;
            }),
          /* retainedProps */component$2[/* retainedProps */11],
          /* reducer */(function (action, _state) {
              if (action) {
                return /* Update */Block.__(0, [action[0]]);
              } else {
                return /* Update */Block.__(0, [0]);
              }
            }),
          /* jsElementWrapped */component$2[/* jsElementWrapped */13]
        ];
}

var ScoreInput = /* module */[
  /* component */component$2,
  /* make */make$1
];

var component$3 = ReasonReact.reducerComponent("Player");

function make$2(name, _children) {
  return /* record */[
          /* debugName */component$3[/* debugName */0],
          /* reactClassInternal */component$3[/* reactClassInternal */1],
          /* handedOffState */component$3[/* handedOffState */2],
          /* willReceiveProps */component$3[/* willReceiveProps */3],
          /* didMount */component$3[/* didMount */4],
          /* didUpdate */component$3[/* didUpdate */5],
          /* willUnmount */component$3[/* willUnmount */6],
          /* willUpdate */component$3[/* willUpdate */7],
          /* shouldUpdate */component$3[/* shouldUpdate */8],
          /* render */(function (self) {
              return React.createElement("div", {
                          className: "container"
                        }, React.createElement("div", {
                              className: "level is-mobile"
                            }, React.createElement("span", {
                                  className: "level-left is-size-2"
                                }, name), React.createElement("div", {
                                  className: "level-right",
                                  style: {
                                    maxWidth: "6rem"
                                  }
                                }, ReasonReact.element(undefined, undefined, make$1((function (score) {
                                            return Curry._1(self[/* send */3], /* Increase */[score]);
                                          }), /* array */[])))), React.createElement("div", undefined, $$Array.of_list(List.map((function (score) {
                                        return React.createElement("span", undefined, String(score) + " ");
                                      }), List.rev(self[/* state */1][/* scores */0])))), "Turns: " + (String(List.length(self[/* state */1][/* scores */0])) + (" Total: " + String(self[/* state */1][/* total */1]))));
            }),
          /* initialState */(function (param) {
              return /* record */[
                      /* scores : [] */0,
                      /* total */0
                    ];
            }),
          /* retainedProps */component$3[/* retainedProps */11],
          /* reducer */(function (action, state) {
              var score = action[0];
              var total = state[/* total */1] + score | 0;
              setStorage(name, total);
              return /* Update */Block.__(0, [/* record */[
                          /* scores : :: */[
                            score,
                            state[/* scores */0]
                          ],
                          /* total */total
                        ]]);
            }),
          /* jsElementWrapped */component$3[/* jsElementWrapped */13]
        ];
}

var Player = /* module */[
  /* component */component$3,
  /* make */make$2
];

function make$3(_children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var match = self[/* state */1][/* winner */1];
              return React.createElement("div", {
                          className: "section"
                        }, match ? React.createElement("div", {
                                className: "container"
                              }, "Winner") : null, React.createElement("div", {
                              className: "container"
                            }, ReasonReact.element(undefined, undefined, make((function ($$event) {
                                        return Curry._1(self[/* send */3], /* AddPlayer */[$$event]);
                                      }), /* array */[]))), React.createElement("div", {
                              className: "container"
                            }, $$Array.of_list(List.map((function (player) {
                                        return ReasonReact.element(String(player[/* id */0]), undefined, make$2(player[/* name */2], /* array */[]));
                                      }), List.rev(self[/* state */1][/* players */0])))), React.createElement("button", {
                              className: "button",
                              onClick: (function (_event) {
                                  return Curry._1(self[/* send */3], /* NewGame */0);
                                })
                            }, "New Game"), React.createElement("button", {
                              className: "button is-warning",
                              onClick: (function (_event) {
                                  return Curry._1(self[/* send */3], /* EndGame */1);
                                })
                            }, "End Game"));
            }),
          /* initialState */(function (param) {
              return /* record */[
                      /* players : [] */0,
                      /* winner */false
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                if (action !== 0) {
                  List.map((function (each) {
                          console.log(each);
                          return /* () */0;
                        }), List.map((function (player) {
                              return /* tuple */[
                                      player[/* name */2],
                                      Js_primitive.null_to_opt(localStorage.getItem(player[/* name */2]))
                                    ];
                            }), state[/* players */0]));
                  return /* Update */Block.__(0, [/* record */[
                              /* players */state[/* players */0],
                              /* winner */true
                            ]]);
                } else {
                  localStorage.clear();
                  return /* Update */Block.__(0, [/* record */[
                              /* players : [] */0,
                              /* winner */false
                            ]]);
                }
              } else {
                var name = action[0];
                setStorage(name, 0);
                return /* Update */Block.__(0, [/* record */[
                            /* players : :: */[
                              newPlayer(name),
                              state[/* players */0]
                            ],
                            /* winner */state[/* winner */1]
                          ]]);
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.component = component;
exports.str = str;
exports.setStorage = setStorage;
exports.getStorage = getStorage;
exports.clearStorage = clearStorage;
exports.getKey = getKey;
exports.lenStorage = lenStorage;
exports.lastId = lastId;
exports.newPlayer = newPlayer;
exports.PlayerInput = PlayerInput;
exports.ScoreInput = ScoreInput;
exports.Player = Player;
exports.make = make$3;
/* component Not a pure module */
